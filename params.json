{"name":"Sqitch","body":"Sqitch is a VCS-aware SQL change management application. What makes it\r\ndifferent from your typical [migration](http://guides.rubyonrails.org/migrations.html)-[style](http://metacpan.org/module/Module::Build::DB) approaches? A few things:\r\n\r\n<dl>\r\n<dt>No opinions</dt>\r\n<dd><p>Sqitch is not integrated with any framework, ORM, or platform. Rather, it is a standalone change management system with no opinions on your database or development choices.</p></dd>\r\n\r\n<dt>Native scripting</dt>\r\n<dd><p>Changes are implemented as scripts native to your selected database engine. Writing a <a href=\"http://postgresql.org/\">PostgreSQL</a> application? Write SQL scripts for <a href=\"http://www.postgresql.org/docs/current/static/app-psql.html\"><code>psql</code></a>. Writing a <a href=\"http://mysql.com/\">MySQL</a>-backed app? Write SQL scripts for <a href=\"http://dev.mysql.com/doc/refman/5.6/en/mysql.html\"><code>mysql</code></a>.</p></dd>\r\n\r\n<dt>VCS integration</dt>\r\n<dd><p>Sqitch likes to use your VCS history to determine in what order to execute changes. No need to keep track of execution order; your VCS already tracks information sufficient for Sqitch to figure it out for you.</p></dd>\r\n\r\n<dt>Dependency resolution</dt>\r\n<dd><p>Deployment steps can declare dependencies on other deployment steps. This ensures proper order of execution, even when you’ve committed changes to your VCS out-of-order.</p></dd>\r\n\r\n<dt>No numbering</dt>\r\n<dd><p>Change deployment is managed either by maintaining a plan file or, more usefully, your VCS history. As such, there is no need to number your changes, although you can if you want. Sqitch doesn’t much care what you name your changes.</p></dd>\r\n\r\n<dt>Bundling</dt>\r\n<dd><p>Rely on your VCS history for deployment but have Sqitch bundle up changes for distribution. Sqitch can read your VCS history and write out a plan file along with the appropriate deployment and reversion scripts. Once the bundle is installed on a new system, Sqitch can use the plan file to deploy or the changes in the proper order.</p></dd>\r\n\r\n<dt>Reduced Duplication</dt>\r\n<dd><p>If you’re using a VCS to track your changes, you don’t have to duplicate entire change scripts for simple changes. As long as the changes are <a href=\"http://en.wikipedia.org/wiki/Idempotence\">idempotent</a>, you can change your code directly, and Sqitch will know it needs to be updated.</p></dd>\r\n</dl>\r\n\r\n### Status\r\n\r\nSqitch is currently under active development, following the design laid out in these three blog posts:\r\n\r\n* [Simple SQL Change Management](http://justatheory.com/computers/databases/simple-sql-change-management.html)\r\n* [VCS-Enabled SQL Change Management](http://justatheory.com/computers/databases/vcs-sql-change-management.html)\r\n* [SQL Change Management Sans Duplication](http://justatheory.com/computers/databases/sql-change-management-sans-redundancy.html)\r\n\r\nWant to help out? [Fork it](https://github.com/theory/sqitch)!\r\n","tagline":"Simple SQL change management","google":"UA-31325046-1","note":"Don't delete this file! It's used internally to help with page regeneration."}